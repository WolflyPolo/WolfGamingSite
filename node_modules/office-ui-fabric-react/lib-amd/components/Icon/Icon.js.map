{"version":3,"file":"Icon.js","sourceRoot":"../src/","sources":["components/Icon/Icon.tsx"],"names":[],"mappings":";;;IAca,QAAA,IAAI,GAAG,UAAC,KAAiB;QAElC,IAAA,2BAAS,EACT,2BAAS,EACT,2BAAS,EACT,2BAAoB,EACpB,yBAAQ,CACC;QAEX,IAAI,MAAM,GAAG,uBAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAEhD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3E,IAAI,kBAAkB,GAAG,eAAG,CAC1B,SAAS,EACT,wBAAwB,EACxB,MAAM,CAAC,IAAI,EACX,MAAM,CAAC,cAAc,EACrB,SAAS,CACV,CAAC;YAEF,MAAM,CAAC,CACL,6BACE,SAAS,EACP,eAAG,CACD,kBAAkB,EAClB,MAAM,CAAC,IAAI,CACZ;gBAEH,oBAAC,aAAK,uBAAM,KAAK,CAAC,UAAiB,EAAK,CACpC,CACP,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,cAAc,GAAG,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YAE3F,MAAM,CAAC,CACL,0DACe,SAAS,IACjB,CAAC,SAAS,GAAG,EAAE,GAAG;gBACrB,IAAI,EAAE,cAAc;gBACpB,aAAa,EAAE,IAAI;gBACnB,gBAAgB,EAAE,QAAQ;aAC3B,CAAC,EACG,0BAAc,CAAC,KAAK,EAAE,iCAAqB,CAAC,IACjD,SAAS,EACP,eAAG,CACD,SAAS,EACT,MAAM,CAAC,IAAI,EACX,KAAK,CAAC,SAAS,CAChB,EACH,OAAO,EAAG,SAAS,KAEhB,mBAAiB,CAAC,cAAc,CAAC,CAClC,CACL,CAAC;QACJ,CAAC;IACH,CAAC,CAAC","sourcesContent":["/* tslint:disable */\r\nimport * as React from 'react';\r\n/* tslint:enable */\r\n\r\nimport { IIconProps, IconType } from './Icon.Props';\r\nimport { Image } from '../Image/Image';\r\nimport {\r\n  css,\r\n  getNativeProps,\r\n  htmlElementProperties\r\n} from '../../Utilities';\r\nimport { IconCodes } from '../../Styling';\r\nimport { getStyles } from './Icon.styles';\r\n\r\nexport const Icon = (props: IIconProps): JSX.Element => {\r\n  let {\r\n    ariaLabel,\r\n    className,\r\n    onClicked,\r\n    styles: customStyles,\r\n    iconName\r\n   } = props;\r\n\r\n  let styles = getStyles(undefined, customStyles);\r\n\r\n  if (props.iconType === IconType.image || props.iconType === IconType.Image) {\r\n    let containerClassName = css(\r\n      'ms-Icon',\r\n      'ms-Icon-imageContainer',\r\n      styles.root,\r\n      styles.imageContainer,\r\n      className\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={\r\n          css(\r\n            containerClassName,\r\n            styles.root\r\n          ) }\r\n      >\r\n        <Image { ...props.imageProps as any } />\r\n      </div>\r\n    );\r\n  } else {\r\n    let iconMemberName = iconName ? iconName.charAt(0).toLowerCase() + iconName.substr(1) : '';\r\n\r\n    return (\r\n      <i\r\n        aria-label={ ariaLabel }\r\n        { ...(ariaLabel ? {} : {\r\n          role: 'presentation',\r\n          'aria-hidden': true,\r\n          'data-icon-name': iconName,\r\n        }) }\r\n        { ...getNativeProps(props, htmlElementProperties) }\r\n        className={\r\n          css(\r\n            'ms-Icon',\r\n            styles.root,\r\n            props.className\r\n          ) }\r\n        onClick={ onClicked }\r\n      >\r\n        { (IconCodes as any)[iconMemberName] }\r\n      </i>\r\n    );\r\n  }\r\n};\r\n"]}