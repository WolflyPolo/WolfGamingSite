{"version":3,"file":"PhantomCssInterface.js","sourceRoot":"../src/","sources":["visualtest/PhantomCssInterface.ts"],"names":[],"mappings":"","sourcesContent":["// This is a temporary hack and should be changed as soon as possible.\r\n// I'm not sure the cause of these errors but they are as follows:\r\n// PhantomCSS causes the compiler to throw an error because it cannot find resemble.\r\n// PhantomJS causes an error because it contains a duplicate definition of require which conflicts\r\n// with nodejs's definition.\r\n// Casper does not include the mouse module.\r\n// I think that all of these can be changed in the DefinitelyTyped repo but I'm not sure how long\r\n// that would take. Additionally some of these problems could be caused by our build systems.\r\n// Finally all of these definitions have been taken from DefinitelyTyped, I did not write them myself.\r\n// The links are:\r\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/phantomcss/index.d.ts\r\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/phantomjs/index.d.ts\r\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/casperjs/index.d.ts\r\n// This file should be trimmed down or replaced once the DefinitelyTyped files have been fixed.\r\nimport { OutputSettings } from 'resemblejs';\r\n\r\nexport interface ICasperMouse {\r\n  down(selector: string): void;\r\n  move(selector: string): void;\r\n}\r\n\r\nexport type Casper = {\r\n  mouse: ICasperMouse;\r\n  test: ITester;\r\n  options: ICasperOptions;\r\n\r\n  // Properties\r\n  __utils__: IClientUtils;\r\n\r\n  // Methods\r\n  back(): Casper;\r\n  base64encode(url: string, method?: string, data?: any): string;\r\n  bypass(nb: number): any;\r\n  click(selector: string): boolean;\r\n  clickLabel(label: string, tag?: string): boolean;\r\n  capture(targetFilePath: string, clipRect: IClipRect): Casper;\r\n  captureBase64(format: string): string;\r\n  captureBase64(format: string, area: string): string;\r\n  captureBase64(format: string, area: IClipRect): string;\r\n  captureBase64(format: string, area: any): string;\r\n  captureSelector(targetFile: string, selector: string): Casper;\r\n  clear(): Casper;\r\n  debugHTML(selector?: string, outer?: boolean): Casper;\r\n  debugPage(): Casper;\r\n  die(message: string, status?: number): Casper;\r\n  download(url: string, target?: string, method?: string, data?: any): Casper;\r\n  each<T>(array: T[], fn: (this: Casper, item: T, index: number) => void): Casper;\r\n  echo(message: string, style?: string): Casper;\r\n  evaluate<T>(fn: () => T, ...args: any[]): T\r\n  evaluateOrDie(fn: () => any, message?: string, status?: number): Casper;\r\n  exit(status?: number): Casper;\r\n  exists(selector: string): boolean;\r\n  fetchText(selector: string): string;\r\n  forward(): Casper;\r\n  log(message: string, level?: string, space?: string): Casper;\r\n  fill(selector: string, values: any, submit?: boolean): void;\r\n  fillSelectors(selector: string, values: any, submit?: boolean): void;\r\n  fillXPath(selector: string, values: any, submit?: boolean): void;\r\n  getCurrentUrl(): string;\r\n  getElementAttribute(selector: string, attribute: string): string;\r\n  getElementsAttribute(selector: string, attribute: string): string;\r\n  getElementBounds(selector: string): IElementBounds;\r\n  getElementsBounds(selector: string): IElementBounds[];\r\n  getElementInfo(selector: string): IElementInfo;\r\n  getElementsInfo(selector: string): IElementInfo;\r\n  getFormValues(selector: string): any;\r\n  getGlobal(name: string): any;\r\n  getHTML(selector?: string, outer?: boolean): string;\r\n  getPageContent(): string;\r\n  getTitle(): string;\r\n  mouseEvent(type: string, selector: string): boolean;\r\n  open(location: string, settings: IOpenSettings): Casper;\r\n  reload(then?: (response: IHttpResponse) => void): Casper;\r\n  repeat(times: number, then: Function): Casper;\r\n  resourceExists(test: Function): boolean;\r\n  resourceExists(test: string): boolean;\r\n  run(onComplete: Function, time?: number): Casper;\r\n  scrollTo(x: number, y: number): Casper;\r\n  scrollToBottom(): Casper;\r\n  sendKeys(selector: string, keys: string, options?: any): Casper;\r\n  setHttpAuth(username: string, password: string): Casper;\r\n  start(url?: string, then?: (response: IHttpResponse) => void): Casper;\r\n  status(asString: boolean): any;\r\n  then(fn: (this: Casper) => void): Casper;\r\n  thenBypass(nb: number): Casper;\r\n  thenBypassIf(condition: any, nb: number): Casper;\r\n  thenBypassUnless(condition: any, nb: number): Casper;\r\n  thenClick(selector: string): Casper;\r\n  thenEvaluate(fn: () => any, ...args: any[]): Casper;\r\n  thenOpen(location: string, then?: (response: IHttpResponse) => void): Casper;\r\n  thenOpen(location: string, options?: IOpenSettings, then?: (response: IHttpResponse) => void): Casper;\r\n  thenOpenAndEvaluate(location: string, then?: Function, ...args: any[]): Casper;\r\n  toString(): string;\r\n  unwait(): Casper;\r\n  userAgent(agent: string): string;\r\n  viewport(width: number, height: number): Casper;\r\n  visible(selector: string): boolean;\r\n  wait(timeout: number, then?: Function): Casper;\r\n  waitFor(testFx: Function, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForAlert(then: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForPopup(urlPattern: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForPopup(urlPattern: RegExp, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForUrl(url: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForUrl(url: RegExp, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForSelector(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitWhileSelector(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForResource(testFx: Function, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForText(pattern: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitForText(pattern: RegExp, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitUntilVisible(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  waitWhileVisible(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\r\n  warn(message: string): Casper;\r\n  withFrame(frameInfo: string, then: Function): Casper;\r\n  withFrame(frameInfo: number, then: Function): Casper;\r\n  withPopup(popupInfo: string, step: Function): Casper;\r\n  withPopup(popupInfo: RegExp, step: Function): Casper;\r\n  zoom(factor: number): Casper;\r\n  removeAllFilters(filter: string): Casper;\r\n  setFilter(filter: string, cb: Function): boolean;\r\n};\r\n\r\nexport interface IHttpResponse {\r\n  contentType: string;\r\n  headers: any[];\r\n  id: number;\r\n  redirectURL: string;\r\n  stage: string;\r\n  status: number;\r\n  statusText: string;\r\n  time: string;\r\n  url: string;\r\n}\r\n\r\nexport interface IOpenSettings {\r\n  method: string;\r\n  data: any;\r\n  headers: any;\r\n}\r\n\r\nexport interface IElementBounds {\r\n  top: number;\r\n  left: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IElementInfo {\r\n  nodeName: string;\r\n  attributes: any;\r\n  tag: string;\r\n  html: string;\r\n  text: string;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  visible: boolean;\r\n}\r\n\r\nexport interface ICasperOptions {\r\n  clientScripts?: any[];\r\n  exitOnError?: boolean;\r\n  httpStatusHandlers?: any;\r\n  logLevel?: string;\r\n  onAlert?: Function;\r\n  onDie?: Function;\r\n  onError?: Function;\r\n  onLoadError?: Function;\r\n  onPageInitialized?: Function;\r\n  onResourceReceived?: Function;\r\n  onResourceRequested?: Function;\r\n  onStepComplete?: Function;\r\n  onStepTimeout?: Function;\r\n  onTimeout?: Function;\r\n  onWaitTimeout?: Function;\r\n  page?: IWebPage;\r\n  pageSettings?: any;\r\n  remoteScripts?: any[];\r\n  safeLogs?: boolean;\r\n  silentErrors?: boolean;\r\n  stepTimeout?: number;\r\n  timeout?: number;\r\n  verbose?: boolean;\r\n  viewportSize?: any;\r\n  retryTimeout?: number;\r\n  waitTimeout?: number;\r\n}\r\n\r\nexport interface IClientUtils {\r\n  echo(message: string): void;\r\n  encode(contents: string): void;\r\n  exists(selector: string): void;\r\n  findAll(selector: string): void;\r\n  findOne(selector: string): void;\r\n  getBase64(url: string, method?: string, data?: any): void;\r\n  getBinary(url: string, method?: string, data?: any): void;\r\n  getDocumentHeight(): void;\r\n  getElementBounds(selector: string): void;\r\n  getElementsBounds(selector: string): void;\r\n  getElementByXPath(expression: string, scope?: HTMLElement): void;\r\n  getElementsByXPath(expression: string, scope?: HTMLElement): void;\r\n  getFieldValue(inputName: string): void;\r\n  getFormValues(selector: string): void;\r\n  mouseEvent(type: string, selector: string): void;\r\n  removeElementsByXPath(expression: string): void;\r\n  sendAJAX(url: string, method?: string, data?: any, async?: boolean): void;\r\n  visible(selector: string): void;\r\n}\r\n\r\nexport interface IColorizer {\r\n  colorize(text: string, styleName: string): void;\r\n  format(text: string, style: any): void;\r\n}\r\n\r\nexport interface ITester {\r\n  assert(condition: boolean, message?: string): any;\r\n  assertDoesntExist(selector: string, message?: string): any;\r\n  assertElementCount(selctor: string, expected: number, message?: string): any;\r\n  assertEquals(testValue: any, expected: any, message?: string): any;\r\n  assertEval(fn: Function, message: string, args: any): any;\r\n  assertEvalEquals(fn: Function, expected: any, message?: string, args?: any): any;\r\n  assertExists(selector: string, message?: string): any;\r\n  assertFalsy(subject: any, message?: string): any;\r\n  assertField(inputName: string, expected: string, message?: string): any;\r\n  assertFieldName(inputName: string, expected: string, message?: string, options?: any): any;\r\n  assertFieldCSS(cssSelector: string, expected: string, message?: string): any;\r\n  assertFieldXPath(xpathSelector: string, expected: string, message?: string): any;\r\n  assertHttpStatus(status: number, message?: string): any;\r\n  assertMatch(subject: any, pattern: RegExp, message?: string): any;\r\n  assertNot(subject: any, message?: string): any;\r\n  assertNotEquals(testValue: any, expected: any, message?: string): any;\r\n  assertNotVisible(selector: string, message?: string): any;\r\n  assertRaises(fn: Function, args: any[], message?: string): any;\r\n  assertSelectorDoesntHaveText(selector: string, text: string, message?: string): any;\r\n  assertSelectorExists(selector: string, message?: string): any;\r\n  assertSelectorHasText(selector: string, text: string, message?: string): any;\r\n  assertResourceExists(testFx: Function, message?: string): any;\r\n  assertTextExists(expected: string, message?: string): any;\r\n  assertTextDoesntExist(unexpected: string, message: string): any;\r\n  assertTitle(expected: string, message?: string): any;\r\n  assertTitleMatch(pattern: RegExp, message?: string): any;\r\n  assertTruthy(subject: any, message?: string): any;\r\n  assertType(input: any, type: string, message?: string): any;\r\n  assertInstanceOf(input: any, ctor: Function, message?: string): any;\r\n  assertUrlMatch(pattern: string, message?: string): any;\r\n  assertUrlMatch(pattern: RegExp, message?: string): any;\r\n  assertVisible(selector: string, message?: string): any;\r\n\r\n  /* since 1.1 */\r\n  begin(description: string, planned: number, suite: Function): any;\r\n  begin(description: string, suite: Function): any;\r\n  begin(description: string, planned: number, config: Object): any;\r\n  begin(description: string, config: Object): any;\r\n\r\n  colorize(message: string, style: string): any;\r\n  comment(message: string): any;\r\n  done(expected?: number): any;\r\n  error(message: string): any;\r\n  fail(message: string): any;\r\n  formatMessage(message: string, style: string): any;\r\n  getFailures(): ICases;\r\n  getPasses(): ICases;\r\n  info(message: string): any;\r\n  pass(message: string): any;\r\n  renderResults(exit: boolean, status: number, save: string): any;\r\n\r\n  setup(fn: Function): any;\r\n  skip(nb: number, message: string): any;\r\n  tearDown(fn: Function): any;\r\n}\r\n\r\nexport interface ICases {\r\n  length: number;\r\n  cases: ICase[];\r\n}\r\n\r\nexport interface ICase {\r\n  success: boolean;\r\n  type: string;\r\n  standard: string;\r\n  file: string;\r\n  values: ICaseValues;\r\n}\r\n\r\nexport interface ICaseValues {\r\n  subject: boolean;\r\n  expected: boolean;\r\n}\r\n\r\nexport interface IUtils {\r\n  betterTypeOf(input: any): any;\r\n  dump(value: any): any;\r\n  fileExt(file: string): any;\r\n  fillBlanks(text: string, pad: number): any;\r\n  format(f: string, ...args: any[]): any;\r\n  getPropertyPath(obj: any, path: string): any;\r\n  inherits(ctor: any, superCtor: any): any;\r\n  isArray(value: any): any;\r\n  isCasperObject(value: any): any;\r\n  isClipRect(value: any): any;\r\n  isFalsy(subject: any): any;\r\n  isFunction(value: any): any;\r\n  isJsFile(file: string): any;\r\n  isNull(value: any): any;\r\n  isNumber(value: any): any;\r\n  isObject(value: any): any;\r\n  isRegExp(value: any): any;\r\n  isString(value: any): any;\r\n  isTruthy(subject: any): any;\r\n  isType(what: any, type: string): any;\r\n  isUndefined(value: any): any;\r\n  isWebPage(what: any): any;\r\n  mergeObjects(origin: any, add: any): any;\r\n  node(name: string, attributes: any): any;\r\n  serialize(value: any): any;\r\n  unique(array: any[]): any;\r\n}\r\n\r\nexport interface IPhantomCSS {\r\n  outputSettings?: OutputSettings;\r\n\r\n  init(options: IPhantomCSSOptions): void;\r\n  update(options: IPhantomCSSOptions): void;\r\n\r\n  /**\r\n   * Take a screenshot of the targeted HTML element\r\n   * FileName is required if addIteratorToImage option is set to false\r\n   */\r\n  screenshot(target: string, fileName?: string): void;\r\n\r\n  /**\r\n   * Take a screenshot of the targeted HTML element\r\n   * FileName is required if addIteratorToImage option is set to false\r\n   */\r\n  screenshot(target: IClipRect, fileName?: string): void;\r\n  /**\r\n   * Take a screenshot of the targeted HTML element\r\n   * FileName is required if addIteratorToImage option is set to false\r\n   */\r\n  screenshot(target: string, timeToWait: number, hideSelector: string, fileName?: string): void;\r\n\r\n  compareAll(exclude: string): void;\r\n  compareAll(exclude: string, diffList: string[], include: string): void;\r\n  compareMatched(match: string, exclude: string): void;\r\n  compareMatched(match: RegExp, exclude: RegExp): void;\r\n  /**\r\n   * Explicitly define what files you want to compare\r\n   */\r\n  compareExplicit(list: string[]): void;\r\n  /**\r\n   * Compare image diffs generated in this test run only\r\n   */\r\n  compareSession(list?: any[]): void;\r\n  compareFiles(baseFile: string, diffFiles: string): IPhantomCSSTest;\r\n  waitForTests(tests: IPhantomCSSTest[]): void;\r\n  done(): void;\r\n  /**\r\n   * Turn off CSS transitions and jQuery animations\r\n   */\r\n  turnOffAnimations(): void;\r\n  getExitStatus(): number;\r\n  /**\r\n   * Get a list of image diffs generated in this test run\r\n   */\r\n  getCreatedDiffFiles(): Array<string>;\r\n}\r\n\r\nexport interface IPhantomCSSTest {\r\n  filename?: string;\r\n  error?: boolean;\r\n  fail?: boolean;\r\n  success?: boolean;\r\n  failFile?: string;\r\n  mismatch?: any;\r\n}\r\n\r\nexport interface IPhantomCSSOptions {\r\n  /**\r\n      Rebase is useful when you want to create new baseline\r\n      images without manually deleting the files\r\n      casperjs demo/test.js --rebase\r\n  */\r\n  rebase?: any;\r\n  /**\r\n    A reference to a particular Casper instance. Required for SlimerJS.\r\n   */\r\n  casper?: Casper;\r\n  /**\r\n  libraryRoot is relative to this file and must point to your phantomcss folder (not lib or node_modules). If you are using NPM, this will be './node_modules/phantomcss'.\r\n  */\r\n  libraryRoot?: string;\r\n\r\n  screenshotRoot?: string;\r\n  /**\r\n  By default, failure images are put in the './failures' folder.\r\n  If failedComparisonsRoot is set to false a separate folder will\r\n  not be created but failure images can still be found alongside\r\n  the original and new images.\r\n  */\r\n  failedComparisonsRoot?: string;\r\n\r\n  /**\r\n  You might want to keep master/baseline images in a completely\r\n  different folder to the diffs/failures.  Useful when working\r\n  with version control systems. By default this resolves to the\r\n  screenshotRoot folder.\r\n  */\r\n  comparisonResultRoot?: string;\r\n\r\n  /**\r\n  Don't add count number to images. If set to false (default), a filename is\r\n  required when capturing screenshots.\r\n  */\r\n  addIteratorToImage: boolean;\r\n\r\n  /**\r\n  Remove results directory tree after run.  Use in conjunction\r\n  with failedComparisonsRoot to see failed comparisons.\r\n  */\r\n  cleanupComparisonImages?: boolean;\r\n\r\n  /**\r\n   * Don't add label to generated failure image\r\n   */\r\n  addLabelToFailedImage?: boolean;\r\n  /**\r\n  Prefix the screenshot number to the filename, instead of suffixing it\r\n  */\r\n  prefixCount?: boolean;\r\n\r\n  hideElements?: string;\r\n  /**\r\n  Mismatch tolerance defaults to  0.05%. Increasing this value\r\n  will decrease test coverage\r\n  */\r\n  mismatchTolerance?: number;\r\n  /**\r\n  * Change the output screenshot filenames for your specific\r\n  * integration\r\n  */\r\n  fileNameGetter?: (rootPath: string, fileName?: string) => string;\r\n  onPass?: (test: IPhantomCSSTest) => void;\r\n  onFail?: (test: IPhantomCSSTest) => void;\r\n  onTimeout?: (test: IPhantomCSSTest) => void;\r\n  onComplete?: (tests: IPhantomCSSTest[], noOfFails: number, noOfErrors: number) => void;\r\n  /**\r\n  Called when creating new baseline images\r\n  */\r\n  onNewImage?: (test: IPhantomCSSTest) => void;\r\n}\r\n\r\n// Type definitions for PhantomJS API 1.9\r\n// Project: https://github.com/ariya/phantomjs/wiki/API-Reference\r\n// Definitions by: Jed Hunsaker <https://github.com/jedhunsaker>, Mike Keesey <https://github.com/keesey>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n\r\n// declare function require(module: string): any;\r\n\r\nexport interface IPhantom {\r\n\r\n  // Properties\r\n  args: string[];  // DEPRECATED\r\n  cookies: ICookie[];\r\n  cookiesEnabled: boolean;\r\n  libraryPath: string;\r\n  scriptName: string;  // DEPRECATED\r\n  version: {\r\n    major: number;\r\n    minor: number;\r\n    patch: number;\r\n  };\r\n\r\n  // Callbacks\r\n  onError: (msg: string, trace: string[]) => any;\r\n\r\n  // Functions\r\n  addCookie(cookie: ICookie): boolean;\r\n  clearCookies(): void;\r\n  deleteCookie(cookieName: string): boolean;\r\n  exit(returnValue?: any): boolean;\r\n  injectJs(filename: string): boolean;\r\n}\r\n\r\nexport interface ISystem {\r\n  pid: number;\r\n  platform: string;\r\n  os: {\r\n    architecture: string;\r\n    name: string;\r\n    version: string;\r\n  };\r\n  env: { [name: string]: string; };\r\n  args: string[];\r\n}\r\n\r\nexport interface IWebPage {\r\n\r\n  // Properties\r\n  canGoBack: boolean;\r\n  canGoForward: boolean;\r\n  clipRect: IClipRect;\r\n  content: string;\r\n  cookies: ICookie[];\r\n  customHeaders: { [name: string]: string; };\r\n  event: any; // :TODO: elaborate this when documentation improves\r\n  focusedFrameName: string;\r\n  frameContent: string;\r\n  frameName: string;\r\n  framePlainText: string;\r\n  frameTitle: string;\r\n  frameUrl: string;\r\n  framesCount: number;\r\n  framesName: any; // :TODO: elaborate this when documentation improves\r\n  libraryPath: string;\r\n  navigationLocked: boolean;\r\n  offlineStoragePath: string;\r\n  offlineStorageQuota: number;\r\n  ownsPages: boolean;\r\n  pages: IWebPage[];\r\n  pagesWindowName: string;\r\n  paperSize: IPaperSize;\r\n  plainText: string;\r\n  scrollPosition: ITopLeft;\r\n  settings: IWebPageSettings;\r\n  title: string;\r\n  url: string;\r\n  viewportSize: ISize;\r\n  windowName: string;\r\n  zoomFactor: number;\r\n  onCallback: Function;  // EXPERIMENTAL\r\n\r\n  // Callbacks\r\n  onAlert: (msg: string) => any;\r\n  onClosing: (closingPage: IWebPage) => any;\r\n  onConfirm: (msg: string) => boolean;\r\n  onConsoleMessage: (msg: string, lineNum?: number, sourceId?: string) => any;\r\n  onError: (msg: string, trace: string[]) => any;\r\n  onFilePicker: (oldFile: string) => string;\r\n  onInitialized: () => any;\r\n  onLoadFinished: (status: string) => any;\r\n  onLoadStarted: () => any;\r\n  onNavigationRequested: (url: string, type: string, willNavigate: boolean, main: boolean) => any;\r\n  onPageCreated: (newPage: IWebPage) => any;\r\n  onPrompt: (msg: string, defaultVal: string) => string;\r\n  onResourceError: (resourceError: IResourceError) => any;\r\n  onResourceReceived: (response: IResourceResponse) => any;\r\n  onResourceRequested: (requestData: IResourceRequest, networkRequest: INetworkRequest) => any;\r\n  onUrlChanged: (targetUrl: string) => any;\r\n\r\n  // Functions\r\n  addCookie(cookie: ICookie): boolean;\r\n  childFramesCount(): number;  // DEPRECATED\r\n  childFramesName(): string;  // DEPRECATED\r\n  clearCookies(): void;\r\n  close(): void;\r\n  currentFrameName(): string;  // DEPRECATED\r\n  deleteCookie(cookieName: string): boolean;\r\n  evaluate(fn: Function, ...args: any[]): any;\r\n  evaluateAsync(fn: Function): void;\r\n  evaluateJavaScript(str: string): any; // :TODO: elaborate this when documentation improves\r\n  getPage(windowName: string): IWebPage;\r\n  go(index: number): void;\r\n  goBack(): void;\r\n  goForward(): void;\r\n  includeJs(url: string, callback: Function): void;\r\n  injectJs(filename: string): boolean;\r\n  open(url: string, callback: (status: string) => any): void;\r\n  open(url: string, method: string, callback: (status: string) => any): void;\r\n  open(url: string, method: string, data: any, callback: (status: string) => any): void;\r\n  openUrl(url: string, httpConf: any, settings: any): void; // :TODO: elaborate this when documentation improves\r\n  release(): void;  // DEPRECATED\r\n  reload(): void;\r\n  render(filename: string): void;\r\n  renderBase64(format: string): string;\r\n  sendEvent(mouseEventType: string, mouseX?: number, mouseY?: number, button?: string): void;\r\n  sendEvent(keyboardEventType: string, keyOrKeys: any, aNull?: any, bNull?: any, modifier?: number): void;\r\n  setContent(content: string, url: string): void;\r\n  stop(): void;\r\n  switchToFocusedFrame(): void;\r\n  switchToFrame(frameName: string): void;\r\n  switchToFrame(framePosition: number): void;\r\n  switchToChildFrame(frameName: string): void;\r\n  switchToChildFrame(framePosition: number): void;\r\n  switchToMainFrame(): void;  // DEPRECATED\r\n  switchToParentFrame(): void;  // DEPRECATED\r\n  uploadFile(selector: string, filename: string): void;\r\n\r\n  // Callback triggers\r\n  closing(closingPage: IWebPage): void;\r\n  initialized(): void;\r\n  javaScriptAlertSent(msg: string): void;\r\n  javaScriptConsoleMessageSent(msg: string, lineNum?: number, sourceId?: string): void;\r\n  loadFinished(status: string): void;\r\n  loadStarted(): void;\r\n  navigationRequested(url: string, type: string, willNavigate: boolean, main: boolean): void;\r\n  rawPageCreated(newPage: IWebPage): void;\r\n  resourceReceived(response: IResourceResponse): void;\r\n  resourceRequested(requestData: IResourceRequest, networkRequest: INetworkRequest): void;\r\n  urlChanged(targetUrl: string): void;\r\n}\r\n\r\nexport interface IResourceError {\r\n  id: number;\r\n  url: string;\r\n  errorCode: string;\r\n  errorString: string;\r\n}\r\n\r\nexport interface IResourceResponse {\r\n  id: number;\r\n  url: string;\r\n  time: Date;\r\n  headers: { [name: string]: string; };\r\n  bodySize: number;\r\n  contentType?: string;\r\n  redirectURL?: string;\r\n  stage: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport interface IResourceRequest {\r\n  id: number;\r\n  method: string;\r\n  url: string;\r\n  time: Date;\r\n  headers: { [name: string]: string; };\r\n}\r\n\r\nexport interface INetworkRequest {\r\n  abort(): void;\r\n  changeUrl(url: string): void;\r\n  setHeader(name: string, value: string): void;\r\n}\r\n\r\nexport interface IPaperSize {\r\n  width?: string;\r\n  height?: string;\r\n  border: string;\r\n  format?: string;\r\n  orientation?: string;\r\n}\r\n\r\nexport interface IWebPageSettings {\r\n  javascriptEnabled: boolean;\r\n  loadImages: boolean;\r\n  localToRemoteUrlAccessEnabled: boolean;\r\n  userAgent: string;\r\n  userName: string;\r\n  password: string;\r\n  XSSAuditingEnabled: boolean;\r\n  webSecurityEnabled: boolean;\r\n  resourceTimeout: number;\r\n}\r\n\r\nexport interface IFileSystem {\r\n\r\n  // Properties\r\n  separator: string;\r\n  workingDirectory: string;\r\n\r\n  // Functions\r\n\r\n  // Query Functions\r\n  list(path: string): string[];\r\n  absolute(path: string): string;\r\n  exists(path: string): boolean;\r\n  isDirectory(path: string): boolean;\r\n  isFile(path: string): boolean;\r\n  isAbsolute(path: string): boolean;\r\n  isExecutable(path: string): boolean;\r\n  isReadable(path: string): boolean;\r\n  isWritable(path: string): boolean;\r\n  isLink(path: string): boolean;\r\n  readLink(path: string): string;\r\n\r\n  // Directory Functions\r\n  changeWorkingDirectory(path: string): void;\r\n  makeDirectory(path: string): void;\r\n  makeTree(path: string): void;\r\n  removeDirectory(path: string): void;\r\n  removeTree(path: string): void;\r\n  copyTree(source: string, destination: string): void;\r\n\r\n  // File Functions\r\n  open(path: string, mode: string): IStream;\r\n  open(path: string, options: { mode: string; charset?: string; }): IStream;\r\n  read(path: string): string;\r\n  write(path: string, content: string, mode: string): void;\r\n  size(path: string): number;\r\n  remove(path: string): void;\r\n  copy(source: string, destination: string): void;\r\n  move(source: string, destination: string): void;\r\n  touch(path: string): void;\r\n}\r\n\r\nexport interface IStream {\r\n  atEnd(): boolean;\r\n  close(): void;\r\n  flush(): void;\r\n  read(): string;\r\n  readLine(): string;\r\n  seek(position: number): void;\r\n  write(data: string): void;\r\n  writeLine(data: string): void;\r\n}\r\n\r\nexport interface IWebServer {\r\n  port: number;\r\n  listen(port: number, cb?: (request: IWebServerRequest, response: IWebServerResponse) => void): boolean;\r\n  listen(ipAddressPort: string, cb?: (request: IWebServerRequest, response: IWebServerResponse) => void): boolean;\r\n  close(): void;\r\n}\r\n\r\nexport interface IWebServerRequest {\r\n  method: string;\r\n  url: string;\r\n  httpVersion: number;\r\n  headers: { [name: string]: string; };\r\n  post: string;\r\n  postRaw: string;\r\n}\r\n\r\nexport interface IWebServerResponse {\r\n  headers: { [name: string]: string; };\r\n  statusCode: number;\r\n  setHeader(name: string, value: string): void;\r\n  header(name: string): string;\r\n  setEncoding(encoding: string): void;\r\n  write(data: string): void;\r\n  writeHead(statusCode: number, headers?: { [name: string]: string; }): void;\r\n  close(): void;\r\n  closeGracefully(): void;\r\n}\r\n\r\nexport interface ITopLeft {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IClipRect extends ITopLeft, ISize {\r\n}\r\n\r\nexport interface ICookie {\r\n  name: string;\r\n  value: string;\r\n  domain?: string;\r\n}\r\n"]}